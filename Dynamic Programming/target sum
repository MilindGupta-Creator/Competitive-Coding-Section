int subsetsum(vector<int>&a,int target,int n)
  {
      int dp[n+1][target+1];
      for(int i=0;i<n+1;i++)
      {
          for(int j=0;j<target+1;j++)
          {
              if(i==0)
              {
                  dp[i][j]=0;
              }
              if(j==0)
              {
                  dp[i][j]=1;
              }
          }
      }
      for(int i=1;i<n+1;i++)
      {
          for(int j=0;j<target+1;j++)
          {
              if(a[i-1]>j)
              {
                  dp[i][j]=dp[i-1][j];
              }
              else
              {
                  dp[i][j]=dp[i-1][j-a[i-1]]+dp[i-1][j];
              }
          }
      }
      return dp[n][target];
  }
    int findTargetSumWays(vector<int>&a ,int target) 
    {
        int sum=0;
        int n=a.size();
        for(int i=0;i<n;i++)
        {
            sum=sum+a[i];
        }
        int sem=(target+sum)/2;
        if((sum+target)%2!=0)
        {
          return 0;
        }
        return subsetsum(a,sem,n);
    }
